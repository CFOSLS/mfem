sudo: false

language: cpp

compiler:
   - clang

os:
   - osx

env:
   - DEBUG=YES MPI=YES TMPDIR=/tmp
>>>>>>> dev_timeslabbing

   # On Mac OS X, build and cache OpenMPI 2.1.1:
   - if [ $TRAVIS_OS_NAME == "osx" ] && [ $MPI == "YES" ]; then
        if [ ! -e $HOME/local-cached/bin/mpicc ]; then
           mkdir -p $HOME/builds && cd $HOME/builds &&
           wget https://www.open-mpi.org/software/ompi/v2.1/downloads/openmpi-2.1.1.tar.bz2 &&
           tar jxf openmpi-2.1.1.tar.bz2 &&
           mkdir openmpi-build && cd openmpi-build &&
           ../openmpi-2.1.1/configure --prefix=$HOME/local-cached &&
           make -j3 all && make install;
        fi;
        PATH=$HOME/local-cached/bin:$PATH;
        cd $TRAVIS_BUILD_DIR;
     fi

   # Update environment to find g++ 4.9 installation first.
   # - if [ $TRAVIS_OS_NAME == "linux" ]; then
   #      mkdir -p latest-gcc-symlinks;
   #      ln -s /usr/bin/g++-4.9 latest-gcc-symlinks/g++;
   #      ln -s /usr/bin/gcc-4.9 latest-gcc-symlinks/gcc;
   #      ln -s /usr/bin/gcov-4.9 latest-gcc-symlinks/gcov;
   #      export PATH=$PWD/latest-gcc-symlinks:$PATH;
   #   fi

   # Install tool to upload code coverage reports to coveralls.io
   - if [ "$CODECOV" == "YES" ]; then
        export PYTHONUSERBASE=$HOME/local;
        pip install --user cpp-coveralls;
        pip install --user pyyaml;
        PATH=$HOME/local/bin:$PATH;
     fi

install:
   # Set MPI compilers, print compiler version
   - if [ $MPI == "YES" ]; then
        if [ "$TRAVIS_OS_NAME" == "linux" ]; then
           export MPICH_CC="$CC";
           export MPICH_CXX="$CXX";
        else
           export OMPI_CC="$CC";
           export OMPI_CXX="$CXX";
           mpic++ --showme:version;
        fi;
        mpic++ -v;
     else
        $CXX -v;
     fi

   # Back out of the mfem directory to install the libraries
   - cd ..

   # hypre
   - if [ $MPI == "YES" ]; then
        if [ ! -e hypre-2.10.0b/src/hypre/lib/libHYPRE.a ]; then
           wget https://computation.llnl.gov/project/linear_solvers/download/hypre-2.10.0b.tar.gz --no-check-certificate;
           rm -rf hypre-2.10.0b;
           tar xvzf hypre-2.10.0b.tar.gz;
           cd hypre-2.10.0b/src;
           ./configure --disable-fortran --without-fei CC=mpicc CXX=mpic++;
           make -j3;
           cd ../..;
        else
            echo "Reusing cached hypre-2.10.0b/";
        fi;
     else
        echo "Serial build, not using hypre";
     fi

   # METIS
   - if [ $MPI == "YES" ]; then
        if [ ! -e metis-4.0/libmetis.a ]; then
           wget http://glaros.dtc.umn.edu/gkhome/fetch/sw/metis/OLD/metis-4.0.3.tar.gz;
           tar xvzf metis-4.0.3.tar.gz;
           make -j3 -C metis-4.0.3/Lib CC="$CC" OPTFLAGS="-O2";
           rm -rf metis-4.0;
           mv metis-4.0.3 metis-4.0;
        else
           echo "Reusing cached metis-4.0/";
        fi;
     fi

script:
   # Compiler
   - if [ $MPI == "YES" ]; then
        export MYCXX=mpic++;
     else
        export MYCXX="$CXX";
     fi

   # Print the compiler version
   - $MYCXX -v

   # Set some variables
   - cd $TRAVIS_BUILD_DIR;
     CPPFLAGS="";
     SKIP_TEST_DIRS="";
     if [ "$CODECOV" == "YES" ]; then
        CPPFLAGS="--coverage -g";
     fi;
     if [ "$CXX" == "clang++" ]; then
        export MFEM_PERF_SW=clang;
     fi

   # Configure the library
   - make config MFEM_USE_MPI=$MPI MFEM_DEBUG=$DEBUG MFEM_CXX="$MYCXX"
        MFEM_MPI_NP=$NPROCS CPPFLAGS="$CPPFLAGS"
   # Show the configuration
   - make info
   # Build the library
   - make -j3
   # Build the examples and the miniapps
   - make -j3 all
   # Run tests
   - make $MFEM_TEST_TARGET SKIP_TEST_DIRS="$SKIP_TEST_DIRS"

after_success:
   - if [ "$CODECOV" == "YES" ]; then
        coveralls --include fem --include general --include linalg --include
           mesh --exclude /usr --gcov-options '\-lp' --root $TRAVIS_BUILD_DIR;
     fi

   # Build and check/test MFEM, its examples and miniapps
   - cd $TRAVIS_BUILD_DIR &&
     make config MFEM_USE_MPI=$MPI MFEM_DEBUG=$DEBUG MFEM_CXX="$MYCXX" &&
     make info &&
     make all -j 4 &&
     make $MFEM_TEST_TARGET 1>&2

